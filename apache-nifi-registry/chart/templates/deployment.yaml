{{ $nifi_root := printf "%s%s" "/opt/nifi-registry/nifi-registry-" .Values.image.tag }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nifireg.fullname" . }}
  namespace: {{ .Release.Namespace }}
  annotations:
    date: {{ now | htmlDate }}
  labels:
    app: {{ template "nifireg.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    date: {{ now | htmlDate }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "nifireg.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "nifireg.fullname" . }}
        release: {{ .Release.Name }}
      annotations:
        releaseTime: {{ dateInZone "2006-01-02 15:04:05Z" (now) "UTC"| quote }}
    spec:
      dnsPolicy: {{ .Values.dnsPolicy |default "ClusterFirst" }}
      volumes:
        - name: nfs-git-storage
          nfs:
            server: {{ .Values.nfs.ip }}
            path: {{ .Values.nfs.folder }}
        - name: hadoop-conf
          nfs:
            server: {{ .Values.nfs.ip }}
            path: {{ .Values.nfs.folderHadoopConf }}/conf
        {{- if .Values.environment.prod }}
        - name: kerberos-dir
        nfs:
          server: {{ .Values.nfs.ip }}
          path: /mnt/sharedfolder/kerberos/krb5.include.d
        {{- end }}
{{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 8 }}
{{- end }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
      containers:
        - name: registry
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          env:
            - name: NIFIREG_GIT_REPO_PROTO
              value: "https://"
            - name: NIFIREG_GIT_REPO_URI
              value: {{ .Values.config.git.address }}
            - name: NIFIREG_GIT_REPO
              value: {{ .Values.config.git.repo }}
            - name: NIFI_REGISTRY_GIT_USER
              valueFrom:
                secretKeyRef:
                  name: nifiregistrypass
                  key: username
            - name: NIFI_REGISTRY_GIT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nifiregistrypass
                  key: password
            - name: KEY_STORE_PASSWD
              valueFrom:
                secretKeyRef:
                  name: nifi-registry-certs-passwd
                  key: KEY_STORE_PASSWD
            - name: KEY_PASSWD
              valueFrom:
                secretKeyRef:
                  name: nifi-registry-certs-passwd
                  key: KEY_PASSWD
            - name: TRUST_STORE_PASSWD
              valueFrom:
                secretKeyRef:
                  name: nifi-registry-certs-passwd
                  key: TRUST_STORE_PASSWD
          command:
            - /bin/bash
            - -c
            - |

              set -x
              set -e
              NIFI_REGISTRY_HOME=/opt/nifi-registry/nifi-registry-current

              echo 'Create directory for Apache Ranger policy cache...'
              touch /etc/ranger/Rossmann_nifi-registry/policycache/Rossmann_nifi-registry_Rossmann_nifi-registry.json

              echo '...0'
              cd ${NIFI_REGISTRY_HOME}
              echo 'done...0'

              echo '...1'
              cd ./git_storage

              git config --global http.sslverify "false"

              if [[ -d "${NIFIREG_GIT_REPO}" ]]; then
                echo 'There is cloned Git repo(s)'
                cd ${NIFIREG_GIT_REPO}
                git pull
              else
                echo 'Cloning the Git repository...'
                git clone "https://${NIFI_REGISTRY_GIT_USER}:${NIFI_REGISTRY_GIT_PASSWORD}@${NIFIREG_GIT_REPO_URI}/${NIFIREG_GIT_REPO}.git"
              fi

              ls -la
              echo 'done...1'

              prop_replace () {
                target_file=${NIFI_REGISTRY_HOME}/conf/nifi-registry.properties
                echo "updating ${1} in ${target_file}"
                if egrep "^${1}=" ${target_file} &> /dev/null; then
                sed -i -e "s|^$1=.*$|$1=$2|"  ${target_file}
                else
                echo ${1}=${2} >> ${target_file}
                fi
              }         

              FQDN=$(hostname -f)
              cd ${NIFI_REGISTRY_HOME}

              # Use jq to extract the passwords form the config.json generated by the tls-toolkit
              # KEY_STORE_PASSWD=`jq -r '.keyStorePassword' ./config.json`
              # KEY_PASSWD=`jq -r '.keyPassword' ./config.json`
              # TRUST_STORE_PASSWD=`jq -r '.trustStorePassword' ./config.json`

              NIFI_PROPS=${NIFI_REGISTRY_HOME}/conf/nifi-registry.properties
              NIFI_AUTHZ_FILE=${NIFI_REGISTRY_HOME}/conf/authorizers.xml
              NIFI_LOGIN_ID=${NIFI_REGISTRY_HOME}/conf/identity-providers.xml
              NIFI_KEY_STORE=${NIFI_REGISTRY_HOME}/conf/keystore.jks
              NIFI_KEY_STORE_TYPE=jks
              NIFI_KEY_STORE_PASSWORD=$KEY_STORE_PASSWD
              NIFI_KEY_PASSWORD=$KEY_PASSWD
              NIFI_TRUST_STORE=${NIFI_REGISTRY_HOME}/conf/truststore.jks
              NIFI_TRUST_STORE_TYPE=jks
              NIFI_TRUST_STORE_PASSWORD=$TRUST_STORE_PASSWD
              NIFI_INITIAL_ADMIN_IDENTITY=albert.lewandowski

              # Fix permissions
              cp ${NIFI_REGISTRY_HOME}/keystore.jks ${NIFI_REGISTRY_HOME}/conf/keystore.jks
              cp ${NIFI_REGISTRY_HOME}/truststore.jks ${NIFI_REGISTRY_HOME}/conf/truststore.jks

              cp ${NIFI_LOGIN_ID} ${NIFI_REGISTRY_HOME}/conf/new-identity-providers.xml
              sed -i -e 's|<property name="TLS - Keystore Password"></property>|<property name="TLS - Keystore Password">'"${NIFI_KEY_STORE_PASSWORD}"'</property>|'                       ${NIFI_REGISTRY_HOME}/conf/new-identity-providers.xml
              sed -i -e 's|<property name="TLS - Truststore Password"></property>|<property name="TLS - Truststore Password">'"${NIFI_TRUST_STORE_PASSWORD}"'</property>|'                 ${NIFI_REGISTRY_HOME}/conf/new-identity-providers.xml                                                                                                                      ${NIFI_REGISTRY_HOME}/conf/new-identity-providers.xml

              sed -i -e 's|<property name="Remote Access User"></property>|<property name="Remote Access User">'"${NIFI_REGISTRY_GIT_USER}"'</property>|'                 ${NIFI_REGISTRY_HOME}/conf/new-identity-providers.xml
              sed -i -e 's|<property name="Remote Access User"></property>|<property name="Remote Access Password">'"${NIFI_REGISTRY_GIT_PASSWORD}"'</property>|'                 ${NIFI_REGISTRY_HOME}/conf/new-identity-providers.xml

              cat "${NIFI_REGISTRY_HOME}/conf/nifi-registry.temp" > "${NIFI_REGISTRY_HOME}/conf/nifi-registry.properties"
              cat "${NIFI_REGISTRY_HOME}/conf/authorizers.temp" > "${NIFI_REGISTRY_HOME}/conf/authorizers.xml"

              # Import certificate for LDAPS and Rossmann
              keytool -import -keystore ${NIFI_REGISTRY_HOME}/conf/truststore.jks -alias rossmannca -file /tmp/ROSSMANNCA.crt -storepass ${NIFI_TRUST_STORE_PASSWORD} -noprompt
              keytool -import -keystore ${NIFI_REGISTRY_HOME}/conf/truststore.jks -alias lcapca -file /tmp/ldapca.crt -storepass ${NIFI_TRUST_STORE_PASSWORD} -noprompt
              # keytool -import -keystore ${NIFI_REGISTRY_HOME}/conf/truststore.jks -alias registrycakubernetesprod -file /tmp/registrycakubernetesprod.crt -storepass ${NIFI_TRUST_STORE_PASSWORD} -noprompt
              # keytool -import -keystore ${NIFI_REGISTRY_HOME}/conf/truststore.jks -alias registrycaprod -file /tmp/registrycaprod.crt -storepass ${NIFI_TRUST_STORE_PASSWORD} -noprompt
              # keytool -import -keystore ${NIFI_REGISTRY_HOME}/conf/truststore.jks -alias registrypdcaprod -file /tmp/registrypdcaprod.crt -storepass ${NIFI_TRUST_STORE_PASSWORD} -noprompt

              # Import certificates from NiFis 
              echo -n|openssl s_client -connect nifi-sandbox-headless.rossmann.com.pl:8443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/nifi-sandbox.crt
              keytool -import -file /tmp/nifi-sandbox.crt -alias nifi-sandbox-cs -keystore ${NIFI_REGISTRY_HOME}/conf/truststore.jks -storepass ${NIFI_TRUST_STORE_PASSWORD} -noprompt

              echo -n|openssl s_client -connect nifi-cdc-headless.rossmann.com.pl:8443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/nifi-cdc.crt
              keytool -import -file /tmp/nifi-cdc.crt -alias nifi-cdc-cs -keystore ${NIFI_REGISTRY_HOME}/conf/truststore.jks -storepass ${NIFI_TRUST_STORE_PASSWORD} -noprompt

              echo -n|openssl s_client -connect nifi-mapping-headless.rossmann.com.pl:8443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/nifi-mapping.crt
              keytool -import -file /tmp/nifi-mapping.crt -alias nifi-mapping-cs -keystore ${NIFI_REGISTRY_HOME}/conf/truststore.jks -storepass ${NIFI_TRUST_STORE_PASSWORD} -noprompt

              echo -n|openssl s_client -connect nifi-marketing-headless.rossmann.com.pl:8443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/nifi-marketing.crt
              keytool -import -file /tmp/nifi-marketing.crt -alias nifi-marketing-cs -keystore ${NIFI_REGISTRY_HOME}/conf/truststore.jks -storepass ${NIFI_TRUST_STORE_PASSWORD} -noprompt

              # Import certificates from NiFi [01-03]
              echo -n|openssl s_client -connect nifi-01.pd.rossmann.com.pl:8443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/nifi-01.crt
              keytool -import -file /tmp/nifi-01.crt -alias nifi-01-cs -keystore ${NIFI_REGISTRY_HOME}/conf/truststore.jks -storepass ${NIFI_TRUST_STORE_PASSWORD} -noprompt
              echo -n|openssl s_client -connect nifi-02.pd.rossmann.com.pl:8443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/nifi-02.crt
              keytool -import -file /tmp/nifi-02.crt -alias nifi-02-cs -keystore ${NIFI_REGISTRY_HOME}/conf/truststore.jks -storepass ${NIFI_TRUST_STORE_PASSWORD} -noprompt
              echo -n|openssl s_client -connect nifi-03.pd.rossmann.com.pl:8443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/nifi-03.crt
              keytool -import -file /tmp/nifi-03.crt -alias nifi-03-cs -keystore ${NIFI_REGISTRY_HOME}/conf/truststore.jks -storepass ${NIFI_TRUST_STORE_PASSWORD} -noprompt

              {{- if .Values.config.security.https.enabled }}
              prop_replace nifi.registry.security.keystore                 ${NIFI_KEY_STORE}
              prop_replace nifi.registry.security.keystoreType             ${NIFI_KEY_STORE_TYPE}
              prop_replace nifi.registry.security.keystorePasswd           ${NIFI_KEY_STORE_PASSWORD}
              prop_replace nifi.registry.security.keyPasswd                ${NIFI_KEY_PASSWORD}
              prop_replace nifi.registry.security.truststore               ${NIFI_TRUST_STORE}
              prop_replace nifi.registry.security.truststoreType           ${NIFI_TRUST_STORE_TYPE}
              prop_replace nifi.registry.security.truststorePasswd         ${NIFI_TRUST_STORE_PASSWORD}

              # Set up TLS
              sed -i -e 's|<property name="TLS - Keystore Password"></property>|<property name="TLS - Keystore Password">'"${NIFI_KEY_STORE_PASSWORD}"'</property>|' ${NIFI_AUTHZ_FILE}
              sed -i -e 's|<property name="TLS - Truststore Password"></property>|<property name="TLS - Truststore Password">'"${NIFI_TRUST_STORE_PASSWORD}"'</property>|' ${NIFI_AUTHZ_FILE}
              {{- end }}

              ${NIFI_REGISTRY_HOME}/bin/nifi-registry.sh start
              tail -F "${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log" &
              nifi_registry_pid="$!"

              trap "echo Received trapped signal, beginning shutdown...;" KILL TERM HUP INT EXIT;

              echo NiFi-Registry running with PID ${nifi_registry_pid}.
              wait ${nifi_registry_pid}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          ports:
            {{- if .Values.config.security.https.enabled }}
            - name: {{ .Values.portName | default "https" }}
              containerPort: {{ .Values.config.ports.https }}
              protocol: TCP
            {{- else }}
            - name: {{ .Values.portName | default "http" }}
              containerPort: {{ .Values.config.ports.http }}
              protocol: TCP
            {{- end }}
          volumeMounts:
            - name: nifi-registry-authorizers
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/authorizers.temp
              subPath: authorizers.xml
            - name: nifi-registry-bootstrap
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/bootstrap.conf
              subPath: bootstrap.conf
            - name: nifi-registry-identity
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/identity-providers.xml
              subPath: identity-providers.xml
            - name: krb5-conf
              mountPath: /etc/krb5.conf
              subPath: krb5.conf
            - name: nifi-registry-logback
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/logback.xml
              subPath: logback.xml
            - name: nifi-registry-properties
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/nifi-registry.temp
              subPath: nifi-registry.properties
            - name: nifi-registry-providers
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/providers.xml
              subPath: providers.xml
            - name: nfs-git-storage
              mountPath: /opt/nifi-registry/nifi-registry-current/git_storage
            - name: rossmannca
              mountPath: /tmp/ROSSMANNCA.crt
              subPath: ROSSMANNCA.crt
            - name: ldapca
              mountPath: /tmp/ldapca.crt
              subPath: ldapca.crt
            - name: ranger-security
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/ranger-nifi-registry-security.xml
              subPath: ranger-nifi-registry-security.xml
            - name: ranger-audit
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/ranger-nifi-registry-audit.xml
              subPath: ranger-nifi-registry-audit.xml
            - name: "hadoop-conf"
              mountPath: /etc/hadoop/conf
            - name: truststore
              mountPath: /opt/nifi-registry/nifi-registry-current/truststore.jks
              subPath: truststore.jks
            - name: keystore
              mountPath: /opt/nifi-registry/nifi-registry-current/keystore.jks
              subPath: keystore.jks
            - name: registrypdcaprod
              mountPath: /tmp/registrypdcaprod.crt
              subPath: registrypdcaprod.crt
            - name: registrycaprod
              mountPath: /tmp/registrycaprod.crt
              subPath: registrycaprod.crt
            - name: registrycakubernetesprod
              mountPath: /tmp/registrycakubernetesprod.crt
              subPath: registrycakubernetesprod.crt
            - name: registryca
              mountPath: /tmp/registryca.crt
              subPath: registryca.crt
            {{- if .Values.environment.prod }}
            - name: "kerberos-dir"
              mountPath: /var/lib/sss/pubconf/krb5.include.d
            {{- end }}
